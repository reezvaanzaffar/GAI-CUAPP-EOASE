// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // Make password optional for social auth
  image         String?
  role          String    @default("user")
  emailVerified Boolean?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[] @relation("UserProducts")
  accounts      Account[]
  sessions      Session[]
  programs      Program[]
  activities    Activity[]
  orders        Order[]
  lastInteraction DateTime?
  interactionCount Int     @default(0)
  engagementLevel String   @default("low")
  events          PersonalizationEvent[]
  verificationTokens VerificationToken[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  sku         String   @unique
  stock       Int
  category    String
  images      String[]
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserProducts")
  orderItems  OrderItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [identifier], references: [email])
}

model Program {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  status      String
  startDate   DateTime
  endDate     DateTime?
  users       User[]
  activities  Activity[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  status    String
  userId    String
  programId String
  user      User     @relation(fields: [userId], references: [id])
  program   Program  @relation(fields: [programId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AutomationPlatform {
  ZAPIER
  MAKE
  CONVERTKIT
  MAILCHIMP
  HUBSPOT
  CLICKUP
  CALENDLY
  SALESFORCE
  MARKETO
  CUSTOM
}

enum AutomationStatus {
  ACTIVE
  PAUSED
  ERROR
  COMPLETED
  PENDING
  DRAFT
}

enum AutomationType {
  WORKFLOW
  TEMPLATE
  WEBHOOK
  SEQUENCE
  TASK
  RULE
}

model AutomationWorkflow {
  id        String   @id @default(cuid())
  name      String
  platform  AutomationPlatform
  type      AutomationType
  status    AutomationStatus
  trigger   Json
  actions   AutomationAction[]
  metadata  AutomationMetadata?
  metrics   AutomationMetrics?
  logs      AutomationLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutomationAction {
  id        String   @id @default(cuid())
  type      String
  config    Json
  status    AutomationStatus
  error     String?
  workflow  AutomationWorkflow @relation(fields: [workflowId], references: [id])
  workflowId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutomationMetadata {
  id          String   @id @default(cuid())
  personaType String?
  tags        String[]
  description String
  workflow    AutomationWorkflow @relation(fields: [workflowId], references: [id])
  workflowId  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AutomationMetrics {
  id                    String   @id @default(cuid())
  successRate          Float
  averageProcessingTime Float
  totalExecutions      Int
  lastExecution        DateTime?
  workflow             AutomationWorkflow @relation(fields: [workflowId], references: [id])
  workflowId           String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model AutomationTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  platform    AutomationPlatform
  type        AutomationType
  config      Json
  personaType String?
  tags        String[]
  usageCount  Int      @default(0)
  successRate Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WebhookEvent {
  id        String   @id @default(cuid())
  type      String
  payload   Json
  timestamp DateTime @default(now())
  status    String
  platform  AutomationPlatform
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutomationAlert {
  id         String   @id @default(cuid())
  type       String
  message    String
  workflowId String?
  platform   AutomationPlatform
  timestamp  DateTime @default(now())
  status     String
  resolution String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AutomationRule {
  id         String   @id @default(cuid())
  name       String
  conditions Json
  actions    Json
  priority   Int
  enabled    Boolean  @default(true)
  personaType String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AutomationLog {
  id        String   @id @default(cuid())
  workflow  AutomationWorkflow @relation(fields: [workflowId], references: [id])
  workflowId String
  platform  AutomationPlatform
  event     String
  status    AutomationStatus
  details   Json
  timestamp DateTime @default(now())
  duration  Float?
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  items         OrderItem[]
  status        OrderStatus @default(PENDING)
  total         Float
  shippingAddress Json
  paymentMethod String
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum Role {
  USER
  ADMIN
}

model PersonalizationRule {
  id          String   @id @default(cuid())
  name        String
  description String?
  condition   Json     // Stores RuleCondition
  action      Json     // Stores RuleAction
  priority    Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Content {
  id             String   @id @default(cuid())
  title          String
  type           String   // article, video, podcast, course
  slug           String   @unique
  description    String?
  isPublished    Boolean  @default(false)
  tags           String[]
  engagementScore Float   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Service {
  id             String   @id @default(cuid())
  name           String
  description    String
  slug           String   @unique
  isActive       Boolean  @default(true)
  targetPersonas String[]
  conversionRate Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PersonalizationEvent {
  id              String   @id @default(cuid())
  userId          String
  interactionType String
  metadata        Json
  timestamp       DateTime @default(now())
  wasCached       Boolean  @default(false)
  ruleMatched     Boolean  @default(false)
  actionTriggered Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id])
}

// Analytics Models
model UserEvent {
  id        String   @id @default(uuid())
  type      String
  timestamp DateTime @default(now())
  userId    String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([userId])
  @@index([timestamp])
}

model UserInteraction {
  id        String   @id @default(uuid())
  type      String
  timestamp DateTime @default(now())
  userId    String?
  contentId String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([userId])
  @@index([contentId])
  @@index([timestamp])
}

model PerformanceMetric {
  id        String   @id @default(uuid())
  type      String
  value     Float
  timestamp DateTime @default(now())
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([timestamp])
}

model ContentAnalytics {
  id              String   @id @default(uuid())
  contentId       String   @unique
  views           Int      @default(0)
  uniqueViews     Int      @default(0)
  averageTimeOnPage Float  @default(0)
  bounceRate      Float    @default(0)
  conversionRate  Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([contentId])
}

model Alert {
  id        String   @id @default(uuid())
  type      String
  message   String
  severity  String   // 'low' | 'medium' | 'high'
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([severity])
  @@index([timestamp])
}

model OptimizationRecommendation {
  id          String   @id @default(uuid())
  type        String
  title       String
  description String
  impact      String   // 'low' | 'medium' | 'high'
  effort      String   // 'low' | 'medium' | 'high'
  priority    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([impact])
  @@index([effort])
  @@index([priority])
}

model LeadCapture {
  id           String   @id @default(uuid())
  email        String
  calculatorType String
  score        Float
  personaType  String?
  leadScore    Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email])
  @@index([calculatorType])
  @@index([personaType])
}

model PlatformData {
  id        String   @id @default(uuid())
  platform  String
  data      Json
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([platform])
  @@index([timestamp])
}

model IntegrationProject {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  status      String
  config      Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  versions        IntegrationVersion[]
  dependencies    IntegrationDependency[]
  tests          IntegrationTest[]
  documentation  IntegrationDocumentation[]
  healthChecks   IntegrationHealthCheck[]
  logs           IntegrationLog[]
  alerts         IntegrationAlert[]
  metrics        IntegrationMetric[]
}

model IntegrationVersion {
  id              String   @id @default(cuid())
  version         String
  changes         String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  integrationId   String
  integration     IntegrationProject @relation(fields: [integrationId], references: [id])
}

model IntegrationDependency {
  id              String   @id @default(cuid())
  name            String
  version         String
  type            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  integrationId   String
  integration     IntegrationProject @relation(fields: [integrationId], references: [id])
}

model IntegrationTest {
  id              String   @id @default(cuid())
  name            String
  type            String
  status          String
  results         Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  integrationId   String
  integration     IntegrationProject @relation(fields: [integrationId], references: [id])
}

model IntegrationDocumentation {
  id              String   @id @default(cuid())
  title           String
  content         String
  type            String
  version         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  integrationId   String
  integration     IntegrationProject @relation(fields: [integrationId], references: [id])
}

model IntegrationHealthCheck {
  id              String   @id @default(cuid())
  status          String
  responseTime    Int
  error           String?
  createdAt       DateTime @default(now())
  integrationId   String
  integration     IntegrationProject @relation(fields: [integrationId], references: [id])
}

model IntegrationLog {
  id              String   @id @default(cuid())
  level           String
  message         String
  metadata        Json?
  createdAt       DateTime @default(now())
  integrationId   String
  integration     IntegrationProject @relation(fields: [integrationId], references: [id])
}

model IntegrationAlert {
  id              String   @id @default(cuid())
  type            String
  severity        String
  message         String
  status          String
  resolvedAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  integrationId   String
  integration     IntegrationProject @relation(fields: [integrationId], references: [id])
}

model IntegrationMetric {
  id              String   @id @default(cuid())
  name            String
  value           Float
  timestamp       DateTime @default(now())
  integrationId   String
  integration     IntegrationProject @relation(fields: [integrationId], references: [id])
}